[project]
name = "zarrnii"
dynamic = ["version"]
description = "Package for working with OME-Zarr and NIFTI images in a unified manner, with a focus on spatial transformations"
authors = [{name = "Ali Khan", email = "alik@robarts.ca"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["neuroimaging", "ome-zarr", "nifti", "biomedical", "imaging", "microscopy", "mri"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Image Processing",
]


dependencies = [
    "zarr>=3.0.8",
    "nibabel>=5.2.0",
    "dask>=2025.5.1",
    "numpy>=1.26.4",
    "scipy>=1.12.0",
    "pandas>=2.2.0",
    "ngff-zarr[all]>=0.13.1",
    "scikit-image>=0.22.0",
    "h5py>=3.14.0",
    "pyyaml>=6.0",
    "ome-zarr>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=6.0.0",
    "pre-commit>=4.0.0",
    "jupyterlab>=4.2.1",
    "matplotlib>=3.9.0",
    "bokeh>=3.4.1",
    "ruff>=0.9.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.50",
    "mkdocstrings>=0.27.0",
    "mkdocstrings-python>=1.13.0",
]

imaris = [
    "h5py>=3.8.0",
]

n4 = [
    "antspyx>=0.5.0",
]

templateflow = [
    "templateflow>=0.8.0",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project.scripts]
z2n = "zarrnii.cli:z2n"
n2z = "zarrnii.cli:n2z"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "zarrnii/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["zarrnii"]


[project.urls]
Homepage = "https://github.com/khanlab/zarrnii"
Documentation = "https://www.khanlab.ca/zarrnii"
Repository = "https://github.com/khanlab/zarrnii"
Issues = "https://github.com/khanlab/zarrnii/issues"


[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
    "notebooks",
    "examples",
    "scripts",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
]
ignore = [
    "E203", # whitespace before ':' (black compatibility)
]
exclude = [
    "tests/*",
    ".venv",
    "build",
    "dist",
    "zarrnii/_version.py",
    ".pixi",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["zarrnii"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.coverage.run]
source = ["zarrnii"]
omit = ["*/_version.py", "*/__pycache__/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=6.0.0",
    "pre-commit>=4.0.0",
    "jupyterlab>=4.2.1",
    "matplotlib>=3.9.0",
    "bokeh>=3.4.1",
    "ruff>=0.9.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.19",
    "mkdocstrings>=0.30.0",
    "mkdocstrings-python>=1.18.2",
]
